#!/opt/local/bin/python
# 
# Dorothy is a Tornado deployer.
# -------------------------------------------------------------------
# Usage:
# 
# - Start a Tornado application on a set of ports:
#   $ dorothy 'python /path/to/app.py' -l:PORT1 -l:PORT2 start
# 
# - Stop a Tornado application by specifying the port:
#   $ dorothy -l:PORT1 stop
# 
# - Restart an application
#   $ dorothy 'python /path/to/app.py' -l:PORT2

from __future__ import with_statement
import subprocess, shlex
import os, sys, re, time
import threading
import signal
from collections import defaultdict

class Parser (object):
	regexp = r'^(?P<port>[0-9]{1,5}):(?P<addr>(?:[0-9]{1,3}.){3}[0-9]{1,3})? (?P<pid>[0-9]{1,5})$'
	
	def __init__(self, filename):
		self.filename = filename
	
	def read(self):
		d = defaultdict(dict)
		
		with open(self.filename, 'a+') as f:
			f.seek(0)
			for line in f:
				regexp = re.compile(self.regexp)
				match = regexp.match(line.strip())
				
				if match:
					addr = match.group('addr') or None
					d[match.group('port')][addr] = match.group('pid')
		
		return d
	
	def write(self, d):
		with open(self.filename, 'w+') as f:
			for port, v in d.iteritems():
				for addr, pid in v.iteritems():
					f.write("%s:%s %s\n" % (port, addr or '', pid))
			
			f.flush()
	

def popenAndCall(callback, args, **kwargs):
	"""
	Runs the given args with subprocess.Popen and calls the specified callback
	when the process completes. The callback must be a callable object, and
	popenArgs is a list or tuple of arguments for subprocess.Popen.
	"""
	def threadedWait(callback, proc):
		returncode = proc.wait()
		callback(proc.pid, returncode)
		return 

	proc = subprocess.Popen(args, **kwargs)
	thread = threading.Thread(target=threadedWait, args=(callback,proc))
	thread.start()
	return proc


class DemonicError (Exception):
	pass


class Demonizer (object):
	def __init__(self, executable, arguments, addressList, pidfile, logfile, user=None):
		self.executable = executable
		self.arguments = arguments
		self.addressList = addressList
		self.pidfile = pidfile
		self.logfile = logfile
		self.euid = None

		if user:
			if os.getuid() == 0:
				try:
					self.euid = pwd.getpwnam(user).pw_uid
				except KeyError, e:
					raise DemonicError('specified user not found')
			else:
				raise DemonicError('must run as root to set effective user')
	
	def startProcess(self, ip, port):
		args = shlex.split(self.executable)
		args.extend(self.arguments)
		args.extend(["--port=%s" % port, '>', options.logfile, '>&', options.logfile])
		
		if self.logfile:
			log = open(self.logfile, 'a')

		if self.euid: os.seteuid(self.euid)
		proc = popenAndCall(self.endProcessCallback, args, bufsize=0, executable=None, stdout=log, stderr=subprocess.STDOUT)
		if self.euid: os.seteuid(0)
		
		log.close()
		
		return proc
	
	def endProcessCallback(self, pid, returncode):
		pass
	
	def enable(self, signal, frame):
		parser = Parser(self.pidfile)
		pids = parser.read()
		
		for (ip, port) in self.addressList:
			if None in pids[port] or ip in pids[port]:
				raise DemonicError("there is already a process bound to that port")
			
			proc = self.startProcess(ip, port)
			pids[port][ip] = proc.pid
		
		parser.write(pids)
	
	def disable(self, signal, frame):
		parser = Parser(self.pidfile)
		pids = parser.read()
		
		for (ip, port) in self.addressList:
			if ip is None:
				# When the IP is left unspecified, we kill all processes 
				# bound to the specified port
				for non, pid in pids[port].iteritems():
					subprocess.Popen(["kill", pid])
				del(pids[port])
			elif ip in pids[port]:
				subprocess.Popen(["kill", pids[port][ip]])
				del(pids[port][ip])
				
				if len(pids[port]) == 0:
					del(pids[port])
			else:
				raise DemonicError("there's no process serving at that address")
		
		parser.write(pids)
		sys.exit(0)
	
	def refresh(self, signal, frame):
		parser = Parser(self.pidfile)
		pids = parser.read()
		
		for (ip, port) in self.addressList:
			if ip is None:
				# When the IP is left unspecified, we kill all processes 
				# bound to the specified port
				for addr, pid in pids[port].iteritems():
					subprocess.Popen(["kill", "-HUP", pid])
				del(pids[port])
			elif ip in pids[port]:
				subprocess.Popen(["kill", "-HUP", pids[port][ip]])
				del(pids[port][ip])
			else:
				raise DemonicError("there's no process serving at that address")
			
			proc = self.startProcess(ip, port)
			pids[port][ip] = proc.pid
		
		parser.write(pids)


if __name__ == "__main__":
	from optparse import OptionParser
	import pwd
	
	usage = 'usage: %s [COMMAND] [-l address] [-p pidfile] [-u user] [-a argument] [start|stop|refresh]' % sys.argv[0]
	
	parser = OptionParser(usage)
	parser.add_option("-l", "--listen", dest="listenAddrs",
		help="specify a listen address (In the form xxx.xxx.xxx.xxx:nnn "
		"where the IP address is optional and the colon and port are"
		" required. If no IP is specified, the server will listen on the "
		"loopback interface.)",
		metavar="ADDR", action="append", default=[])
	parser.add_option("-u", "--user", dest="user",
		help="set the user for the child processes",
		metavar="USER", default=None)
	parser.add_option("-p", "--pidfile", dest="pidfile",
		help="specify a PID file", metavar="FILE",
		default="/var/spool/twister.pid")
	parser.add_option("-f", "--logfile", dest="logfile",
		help="redirect STDOUT and STDERR to the specified file",
		metavar="FILE", default="/var/log/tornado.log")
	parser.add_option("-a", "--arg", dest="args",
		help="command line arguments to be sent to the child processes",
		metavar="ARGUMENT", action="append", default=[])

	(options, args) = parser.parse_args()
	
	if len(args) == 1:
		args.insert(0, None)
	
	if args[-1] not in ['start', 'stop', 'refresh']:
		parser.error()
	
	addressList = []
	
	for address in options.listenAddrs:
		regexp = re.compile(r'^((?:[0-9]{1,3}.){3}[0-9]{1,3})?:([0-9]{1,5})$')
		match = regexp.match(address)
		
		if match:
			addressList.append(match.group(1, 2))
		else:
			parser.error('"%s" is not a valid address' % address)
	
#	logfile = open(options.logfile, 'a+')

#	ctx = daemon.DaemonContext(stdout=logfile, stderr=logfile, working_directory='.')
#	ctx.open()
	
	d = Demonizer(args[0], options.args, addressList, options.pidfile, options.logfile, options.user)
	
	signal.signal(signal.SIGHUP, d.refresh)
	signal.signal(signal.SIGTERM, d.disable)

	dispatch = {
		'start': d.enable,
		'stop': d.disable,
		'refresh': d.refresh
	}
	
	try:
		dispatch[args[-1]](None, None)
	except DemonicError, e:
		parser.error(e.message)

	while True:
		time.sleep(120)
